module Main where

-- Haskell module generated by the BNF converter

import Text.Show.Pretty 
import LexMpp
import ParMpp
import ErrM
import System.Environment
import AbsMpp
import SkelMpp
import AST
import SymbolTable
		   
main = do
    args <- getArgs
    conts <- readFile (args !! 0)
    let tok = tokens conts
    let ptree = pProg tok       
    putStrLn "The AST Tree:\n"
    case ptree of
        Ok  tree -> do
            let ast = transProg tree
            let st = process ast
            putStrLn $ ((ppShow ast) ++ "\n\n" ++ (ppShow st))
        Bad msg-> putStrLn msg
