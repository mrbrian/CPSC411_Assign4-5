module Main where

-- Haskell module generated by the BNF converter

import Text.Show.Pretty 
import LexMp
import ParMp
import ErrM
import System.Environment
import AbsMp
import SkelMp
import AST
import SymbolTable
import IR
import AST_to_IR
import CodeGen
import Semantic			 
			
		
main = do 
	args <- getArgs
	case length args == 2 of
		False  -> do 
			let usage = "\nExpecting of the form < ./Assign5 inputfile outputfile >.\n\nTry again. :(\n"
			error $ "\n****************Error: Expecting input and output filenames as arguments." ++ usage
		True -> do		
			conts <- readFile (args !! 0)
			let tok = tokens conts
			let ptree = pProg tok       
			putStrLn "The AST Tree:\n"
			case ptree of
				Ok  tree -> do
					let ast = transProg tree			
					let type_check = checkProg ast 
					let ir = processProg ast
					let code = codegen_Prog ir
					(case type_check of
						True -> do
							putStrLn $ ((ppShow ast) ++ "\n\nSemantic check passed!\n\n" ++ (ppShow ir) ++ conts ++ "\n" ++ code)					
							writeFile (args !! 1) code
						False -> putStrLn $ ((ppShow ast) ++ "\n\nSemantic check failed.\n\n"))
				Bad msg-> putStrLn msg
		
		